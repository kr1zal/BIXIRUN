import { useAppDispatch, useAppSelector } from '../store/hooks'
import {
    decrementSeconds,
    nextPhase,
    pauseTimer,
    resetTimer,
    setTimerConfig,
    startTimer
} from '../store/slices/timerSlice'
import * as MediaLibrary from 'expo-media-library'
import { Stack, useLocalSearchParams, useRouter } from 'expo-router'
import React, { useCallback, useEffect, useRef, useState } from 'react'
import { Alert, NativeModules, StyleSheet, Text, TouchableOpacity, View, AppState, AppStateStatus } from 'react-native'
import Svg, { Circle } from 'react-native-svg'
import { Camera, useCameraDevice, useCameraPermission, useMicrophonePermission } from 'react-native-vision-camera'

// –ù–µ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ–∞–π–ª–∞ ‚Äî –±–µ—Ä—ë–º –ª–µ–Ω–∏–≤–æ –∏–∑ NativeModules

type TimerVideoRecorderModule = {
    startRecording: (config: Record<string, unknown>) => Promise<{ status: string; message: string }>
    stopRecording: () => Promise<{ status: string; videoPath?: string }>
    updateTimer: (config: { timerText: string; phaseText?: string; progressText?: string; progressRatio?: number }) => void
    switchCamera?: (pos: 'front' | 'back') => Promise<{ status: string; camera: string }>
    isRecording?: () => Promise<{ recording: boolean }>
}

const getTimerVideoRecorder = () => (NativeModules as unknown as { TimerVideoRecorder?: TimerVideoRecorderModule }).TimerVideoRecorder
const getRecorderOrThrow = (): TimerVideoRecorderModule => {
    const mod = getTimerVideoRecorder()
    if (!mod) throw new Error('–ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å TimerVideoRecorder –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    return mod
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
const checkNativeModule = () => {
    const mod = getTimerVideoRecorder()
    if (!mod) {
        console.error('‚ùå TimerVideoRecorder –Ω–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!')
        console.log('üì± –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:', Object.keys(NativeModules))
        return false
    }
    console.log('‚úÖ TimerVideoRecorder –º–æ–¥—É–ª—å –Ω–∞–π–¥–µ–Ω!')
    return true
}

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ç–∞–π–º–µ—Ä–∞
import { useTimer } from '../hooks/useTimer'
import type { RootState } from '../store'
import type { TimerState } from '../store/slices/timerSlice'

// const { width, height } = Dimensions.get('window')

// Custom hook for interval
function useInterval(callback: () => void, delay: number | null) {
    const savedCallback = useRef<() => void>(callback)

    useEffect(() => {
        savedCallback.current = callback
    }, [callback])

    useEffect(() => {
        function tick() {
            if (savedCallback.current) {
                savedCallback.current()
            }
        }
        if (delay !== null) {
            const id = setInterval(tick, delay)
            return () => clearInterval(id)
        }
    }, [delay])
}



export default function TimerWorkout() {
    const router = useRouter()
    const params = useLocalSearchParams()
    const dispatch = useAppDispatch()
    const timerState = useAppSelector((state: RootState) => state.timer) as TimerState
    const cameraRef = useRef<Camera>(null)

    // –ö–∞–º–µ—Ä–∞
    const [facing, setFacing] = useState<'front' | 'back'>('back')
    const [isRecording, setIsRecording] = useState(false)
    const [isPaused, setIsPaused] = useState(false)
    const isStartingRef = useRef(false)
    const isStoppingRef = useRef(false)
    const [isPendingStart, setIsPendingStart] = useState(false)
    const [isPendingStop, setIsPendingStop] = useState(false)
    // const [cameraReady, setCameraReady] = useState(false)
    // const [recordingStartTime, setRecordingStartTime] = useState(0)



    const { hasPermission: hasCameraPermission, requestPermission: requestCameraPermission } = useCameraPermission()
    const { hasPermission: hasMicrophonePermission, requestPermission: requestMicrophonePermission } = useMicrophonePermission()
    const [mediaLibraryPermission, requestMediaLibraryPermission] = MediaLibrary.usePermissions()

    const device = useCameraDevice(facing)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ —Ç–∞–π–º–µ—Ä–∞
    const { formatTime, getPhaseInfo, /* getProgressText, */ progress } = useTimer()

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    useEffect(() => {
        checkPermissions()
    }, [])

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ - –û–î–ò–ù —Ä–∞–∑ —á–µ—Ä–µ–∑ setTimerConfig
    useEffect(() => {
        if (__DEV__) console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params)

        const config = {
            prep: params.prep ? Number(params.prep) : undefined,
            work: params.work ? Number(params.work) : undefined,
            rest: params.rest ? Number(params.rest) : undefined,
            cycles: params.cycles ? Number(params.cycles) : undefined,
            sets: params.sets ? Number(params.sets) : undefined,
            restBetweenSets: params.restBetweenSets ? Number(params.restBetweenSets) : undefined,
            descWork: params.descWork ? String(params.descWork) : undefined,
            descRest: params.descRest ? String(params.descRest) : undefined,
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –û–î–ù–ò–ú –¥–µ–π—Å—Ç–≤–∏–µ–º
        dispatch(setTimerConfig(config))

        if (__DEV__) console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
    }, []) // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –æ–¥–∏–Ω —Ä–∞–∑

    // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
    useInterval(() => {
        if (__DEV__) console.log('‚è∞ –¢–∏–∫ —Ç–∞–π–º–µ—Ä–∞:', {
            running: timerState.running,
            isPaused: isPaused,
            seconds: timerState.seconds,
            phase: timerState.phase
        })

        if (timerState.running && !isPaused) {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å seconds = -1
            if (timerState.seconds <= 1) {
                if (__DEV__) console.log('üîî –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ')
                playSound()
                dispatch(nextPhase())
            } else {
                if (__DEV__) console.log('‚¨áÔ∏è –£–º–µ–Ω—å—à–∞–µ–º —Å–µ–∫—É–Ω–¥—ã —Å', timerState.seconds, '–¥–æ', timerState.seconds - 1)
                dispatch(decrementSeconds())
            }
        } else {
            if (__DEV__) console.log('‚è∏Ô∏è –¢–∞–π–º–µ—Ä –Ω–µ —Ç–∏–∫–∞–µ—Ç:', { running: timerState.running, isPaused: isPaused })
        }
    }, timerState.running && !isPaused ? 1000 : null)

    const checkPermissions = async () => {
        try {
            if (!hasCameraPermission) {
                await requestCameraPermission()
            }
            if (!hasMicrophonePermission) {
                await requestMicrophonePermission()
            }
            if (!mediaLibraryPermission?.granted) {
                await requestMediaLibraryPermission()
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error)
        }
    }

    // –ú–æ–∫–∞ –¥–ª—è –∑–≤—É–∫–æ–≤ - –∏–∑–±–µ–≥–∞–µ–º –æ—à–∏–±–æ–∫
    const playSound = useCallback(() => {
        try {
            console.log('üîä –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ —Ñ–∞–∑—ã')
            // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–≤—É–∫–∞ –≤ –±—É–¥—É—â–µ–º
            // const { sound } = await Audio.Sound.createAsync(require('@/assets/sounds/beep.mp3'));
            // await sound.playAsync();
        } catch (error) {
            console.log('üîá –ó–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error)
        }
    }, [])

    // –°–æ–±—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã - —Å–æ–≥–ª–∞—Å–Ω–æ Context7 –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const onCameraInitialized = useCallback(() => {
        console.log('üì∑ –ö–∞–º–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
    }, [])

    const onCameraStarted = useCallback(() => {
        console.log('üì∑ –ö–∞–º–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞')
    }, [])

    const onCameraStopped = useCallback(() => {
        console.log('üì∑ –ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    }, [])

    const onCameraError = useCallback((error: unknown) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã:', error)
        const message = error instanceof Error ? error.message : String((error as Record<string, unknown>)?.message ?? error)
        Alert.alert('–û—à–∏–±–∫–∞ –∫–∞–º–µ—Ä—ã', message)
    }, [])

    // –ì–õ–ê–í–ù–´–ï –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø

    // 1. –ö–Ω–æ–ø–∫–∞ –°–¢–ê–†–¢/–°–¢–û–ü - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ —Å —Ç–∞–π–º–µ—Ä–æ–º
    const handleStartStop = useCallback(async () => {
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—Ä–µ–±–µ–∑–≥–∞: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏—è –≤–æ –≤—Ä–µ–º—è start/stop
        if (isPendingStart || isPendingStop) return
        if (!isRecording) {
            // –°–¢–ê–†–¢ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å —Å –Ω–∞—Ç–∏–≤–Ω—ã–º –º–æ–¥—É–ª–µ–º
            try {
                if (isStartingRef.current || isPendingStart) return
                isStartingRef.current = true
                setIsPendingStart(true)
                if (__DEV__) console.log('üé¨ –°–¢–ê–†–¢: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ —Å —Ç–∞–π–º–µ—Ä–æ–º')

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                if (!hasCameraPermission || !hasMicrophonePermission) {
                    Alert.alert(
                        '–ù—É–∂–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è',
                        '–î–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ —Å —Ç–∞–π–º–µ—Ä–æ–º –Ω—É–∂–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–∞–º–µ—Ä—É –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.',
                        [{ text: 'OK' }]
                    )
                    return
                }

                const phaseInfo = getPhaseInfo()
                const config = {
                    timerText: formatTime(timerState.seconds),
                    phaseText: phaseInfo?.name ?? '',
                    progressText: `${timerState.currentCycle}/${timerState.cycles} ‚Ä¢ –°–µ—Ç ${timerState.currentSet}`,
                    progressRatio: progress,
                    fontSize: 48,
                    fontColor: '#ffffff',
                    backgroundColor: 'rgba(0,0,0,0.8)',
                    borderRadius: 10,
                    position: 'bottom-center' as const,
                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞–º–µ—Ä—É –≤ –Ω–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å
                    cameraPosition: facing,
                    videoOrientation: 'portrait' as const,
                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ ReplayKit –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                    useReplayKit: true,
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
                if (!checkNativeModule()) {
                    throw new Error('–ù–∞—Ç–∏–≤–Ω—ã–π –º–æ–¥—É–ª—å TimerVideoRecorder –Ω–µ –Ω–∞–π–¥–µ–Ω')
                }

                // –°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—Ç—É–µ–º –∑–∞–ø–∏—Å—å (UI –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫)
                const result = await getRecorderOrThrow().startRecording(config)
                if (__DEV__) console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å:', result)

                setIsRecording(true)
                // –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                dispatch(startTimer())

                Alert.alert('–ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å', '–í–∏–¥–µ–æ —Å —Ç–∞–π–º–µ—Ä–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!')

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø–∏—Å–∏:', error)
                Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
                // –ü–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
                setIsRecording(false)
            } finally {
                isStartingRef.current = false
                setIsPendingStart(false)
            }
        } else {
            // –°–¢–û–ü - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ
            try {
                if (isStoppingRef.current || isPendingStop) return
                isStoppingRef.current = true
                setIsPendingStop(true)
                if (__DEV__) console.log('‚èπÔ∏è –°–¢–û–ü: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ')

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                dispatch(pauseTimer())

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å
                const result = await getRecorderOrThrow().stopRecording()
                if (__DEV__) console.log('‚úÖ –í–∏–¥–µ–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:', result)

                setIsRecording(false)

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if (result.status === 'success') {
                    Alert.alert('–ì–æ—Ç–æ–≤–æ!', '–í–∏–¥–µ–æ —Å —Ç–∞–π–º–µ—Ä–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –≥–∞–ª–µ—Ä–µ—é!')
                } else if (result.status === 'saved_locally') {
                    Alert.alert('–ì–æ—Ç–æ–≤–æ!', '–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ (–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞–ª–µ—Ä–µ—é)')
                } else {
                    Alert.alert('–ì–æ—Ç–æ–≤–æ!', '–í–∏–¥–µ–æ –∑–∞–ø–∏—Å–∞–Ω–æ')
                }

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ:', error)
                Alert.alert('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–¥–µ–æ: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
                setIsRecording(false)
            } finally {
                isStoppingRef.current = false
                setIsPendingStop(false)
            }
        }
    }, [isRecording, timerState, dispatch, startTimer, getPhaseInfo])

    // 2. –ö–Ω–æ–ø–∫–∞ –ü–ê–£–ó–ê/–î–ê–õ–ï–ï - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
    const handlePauseResume = useCallback(() => {
        if (!isRecording) return

        try {
            if (isPaused) {
                if (__DEV__) console.log('‚ñ∂Ô∏è –î–ê–õ–ï–ï: –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä')
                dispatch(startTimer())
                setIsPaused(false)
            } else {
                if (__DEV__) console.log('‚è∏Ô∏è –ü–ê–£–ó–ê: –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä')
                dispatch(pauseTimer())
                setIsPaused(true)
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–∞—É–∑—ã/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
        }
    }, [isPaused, isRecording, dispatch])

    // 3. –ö–Ω–æ–ø–∫–∞ –°–ë–†–û–° - —Ä–µ—Ñ—Ä–µ—à–∏—Ç —Ç–∞–π–º–µ—Ä
    const handleReset = useCallback(async () => {
        if (__DEV__) console.log('üîÑ –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞')

        try {
            const mod = getTimerVideoRecorder()
            if (isRecording && mod) {
                if (__DEV__) console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º')
                await mod.stopRecording()
            }
        } catch (_e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–ø–∏—Å–∏ –≤–æ –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞:', _e)
        } finally {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setIsRecording(false)
            setIsPaused(false)
            dispatch(resetTimer())
        }
    }, [dispatch, isRecording])

    // 4. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ
    // const handleNext = useCallback(() => {
    //     dispatch(nextPhase());
    //     playSound();
    // }, [dispatch]);

    const handleGoHome = useCallback(() => {
        const navigateHome = () => {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ (—Å–±—Ä–æ—Å–∏–º –º–æ–¥–∞–ª—å–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é)
            router.replace('/main')
        }
        if (isRecording || timerState.running) {
            Alert.alert(
                '–¢–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω',
                '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä?',
                [
                    { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                    {
                        text: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                        style: 'destructive',
                        onPress: async () => {
                            try {
                                const mod = getTimerVideoRecorder()
                                if (isRecording && mod) {
                                    await mod.stopRecording()
                                }
                            } catch (e) {
                                console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –¥–æ–º–æ–π:', e)
                            } finally {
                                setIsRecording(false)
                                dispatch(resetTimer())
                                navigateHome()
                            }
                        }
                    }
                ]
            )
        } else {
            navigateHome()
        }
    }, [isRecording, timerState.running, dispatch, router])

    // –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞: –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Ç–∞–π–º–µ—Ä–∞
    const handleGoToTimerSettings = useCallback(() => {
        const navigateSettings = () => {
            router.replace('/timer-settings')
        }
        if (isRecording || timerState.running) {
            Alert.alert(
                '–¢–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω',
                '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä?',
                [
                    { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
                    {
                        text: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                        style: 'destructive',
                        onPress: async () => {
                            try {
                                const mod = getTimerVideoRecorder()
                                if (isRecording && mod) {
                                    await mod.stopRecording()
                                }
                            } catch (e) {
                                console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', e)
                            } finally {
                                setIsRecording(false)
                                dispatch(resetTimer())
                                navigateSettings()
                            }
                        }
                    }
                ]
            )
        } else {
            navigateSettings()
        }
    }, [isRecording, timerState.running, dispatch, router])

    // AppState: –ø—Ä–∏ —É—Ö–æ–¥–µ –≤ —Ñ–æ–Ω ‚Äî –º—è–≥–∫–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å/—Ç–∞–π–º–µ—Ä
    useEffect(() => {
        const onChange = (state: AppStateStatus) => {
            if (state === 'background') {
                if (__DEV__) console.log('üü¢ AppState changed: background ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–∞–π–º–µ—Ä–∞/–∑–∞–ø–∏—Å–∏')
                try {
                    const mod = getTimerVideoRecorder()
                    if (isRecording && mod) {
                        mod.stopRecording()
                    }
                } catch (_e) {
                    // ignore
                }
                setIsRecording(false)
                dispatch(pauseTimer())
            }
        }
        const sub = AppState.addEventListener('change', onChange)
        return () => sub.remove()
    }, [dispatch, isRecording])

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–∫—Ä–∞–Ω–∞ (–æ–¥–∏–Ω —Ä–∞–∑)
    useEffect(() => {
        return () => {
            try {
                const mod = getTimerVideoRecorder()
                // –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, –±–µ–∑ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                if (mod && typeof mod.stopRecording === 'function') {
                    // fire-and-forget
                    void mod.stopRecording()
                }
            } catch (_e) {
                // ignore
            }
            dispatch(pauseTimer())
        }
    }, [dispatch])

    const toggleCameraFacing = useCallback(() => {
        setFacing(facing === 'back' ? 'front' : 'back')
    }, [facing])

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–∑–µ
    const phaseInfo = getPhaseInfo()

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const currentDescription = timerState.phase === 'work' ? timerState.descWork :
        (timerState.phase === 'rest' || timerState.phase === 'restSet') ? timerState.descRest :
            undefined

    const isTimerFinished = timerState.isFinished

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –≤ –Ω–∞—Ç–∏–≤–Ω–æ–º –º–æ–¥—É–ª–µ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
    useEffect(() => {
        const mod = getTimerVideoRecorder()
        if (isRecording && mod) {
            try {
                const phaseInfo = getPhaseInfo()
                mod.updateTimer({
                    timerText: formatTime(timerState.seconds),
                    phaseText: phaseInfo?.name ?? '',
                    progressText: `${timerState.currentCycle}/${timerState.cycles} ‚Ä¢ –°–µ—Ç ${timerState.currentSet}`,
                    progressRatio: progress,
                })
                if (__DEV__) console.log('üîÑ –û–±–Ω–æ–≤–∏–ª–∏ —Ç–∞–π–º–µ—Ä –≤ –≤–∏–¥–µ–æ:', {
                    time: formatTime(timerState.seconds),
                    phase: phaseInfo?.name ?? '',
                    progress: `${timerState.currentCycle}/${timerState.cycles} ‚Ä¢ –°–µ—Ç ${timerState.currentSet}`
                })
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞:', error)
            }
        }
    }, [isRecording, timerState.seconds, timerState.phase, timerState.currentCycle, timerState.cycles, timerState.currentSet, formatTime, getPhaseInfo])

    // (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ toggleCameraFacing)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    if (!hasCameraPermission) {
        return (
            <View style={styles.permissionContainer}>
                <Text style={styles.permissionText}>–ù—É–∂–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É</Text>
                <TouchableOpacity style={styles.permissionButton} onPress={requestCameraPermission}>
                    <Text style={styles.permissionButtonText}>–†–∞–∑—Ä–µ—à–∏—Ç—å</Text>
                </TouchableOpacity>
            </View>
        )
    }

    if (!device) {
        return (
            <View style={styles.permissionContainer}>
                <Text style={styles.permissionText}>–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</Text>
            </View>
        )
    }

    return (
        <View style={styles.container}>
            <Stack.Screen options={{ headerShown: false }} />

            {/* –ö–∞–º–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ */}
            <Camera
                ref={cameraRef}
                style={StyleSheet.absoluteFill}
                device={device}
                isActive
                video
                audio={!!hasMicrophonePermission}
                onInitialized={onCameraInitialized}
                onStarted={onCameraStarted}
                onStopped={onCameraStopped}
                onError={onCameraError}
            />

            {/* –í–µ—Ä—Ö–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ */}
            <View style={styles.topControls}>
                <TouchableOpacity style={styles.topButton} onPress={handleGoToTimerSettings}>
                    <Text style={styles.topButtonText}>‚öôÔ∏è</Text>
                </TouchableOpacity>
                <TouchableOpacity style={styles.topButton} onPress={toggleCameraFacing}>
                    <Text style={styles.topButtonText}>üîÑ</Text>
                </TouchableOpacity>
                <TouchableOpacity style={styles.topButton} onPress={handleGoHome}>
                    <Text style={styles.topButtonText}>üè†</Text>
                </TouchableOpacity>
            </View>

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ */}
            {isRecording && (
                <View style={styles.recordingIndicator}>
                    <Text style={styles.recordingText}>
                        {isPaused ? '‚è∏Ô∏è –ü–ê–£–ó–ê' : 'üé¨ –ê–ö–¢–ò–í–ï–ù'}
                    </Text>
                </View>
            )}

            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–∞—É–∑—ã */}
            {isPaused && isRecording && (
                <View style={styles.pauseIndicator}>
                    <Text style={styles.pauseText}>‚è∏Ô∏è –ü–ê–£–ó–ê</Text>
                </View>
            )}

            {/* –í–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä—É–≥–ª—ã–π —Ç–∞–π–º–µ—Ä –ø–æ —Ü–µ–Ω—Ç—Ä—É (–∫–∞–∫ –≤ –ø—Ä–µ–≤—å—é) */}
            {isRecording && (
                <View style={styles.recordingTimerWrapper}>
                    <View style={styles.timerCircle}>
                        {/* @ts-ignore react-native-svg JSX typing glitch in some toolchains */}
                        <Svg width={200} height={200} style={styles.progressSvg}>
                            <Circle
                                cx="100"
                                cy="100"
                                r="90"
                                stroke="rgba(255, 255, 255, 0.3)"
                                strokeWidth="8"
                                fill="transparent"
                            />
                            <Circle
                                cx="100"
                                cy="100"
                                r="90"
                                stroke="#4CAF50"
                                strokeWidth="8"
                                fill="transparent"
                                strokeDasharray={`${2 * Math.PI * 90}`}
                                strokeDashoffset={2 * Math.PI * 90 * (1 - progress)}
                                strokeLinecap="round"
                                transform="rotate(-90 100 100)"
                            />
                        </Svg>

                        <View style={styles.timerContent}>
                            <Text style={styles.timerText}>{formatTime(timerState.seconds)}</Text>
                            <Text style={styles.phaseText}>{phaseInfo?.name ?? ''}</Text>
                            <Text style={styles.progressText}>
                                –ò–Ω—Ç–µ—Ä–≤–∞–ª {timerState.currentCycle} / –°–µ—Ç {timerState.currentSet}
                            </Text>
                        </View>
                    </View>
                </View>
            )}

            {/* –û–±—ã—á–Ω—ã–π —Ç–∞–π–º–µ—Ä - –¥–ª—è –ø—Ä–µ–≤—å—é (–∫–æ–≥–¥–∞ –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º) */}
            {!isRecording && (
                <View style={styles.timerContainer}>
                    <View style={styles.timerCircle}>
                        {/* @ts-ignore react-native-svg JSX typing glitch in some toolchains */}
                        <Svg width={200} height={200} style={styles.progressSvg}>
                            <Circle
                                cx="100"
                                cy="100"
                                r="90"
                                stroke="rgba(255, 255, 255, 0.3)"
                                strokeWidth="8"
                                fill="transparent"
                            />
                            <Circle
                                cx="100"
                                cy="100"
                                r="90"
                                stroke="#4CAF50"
                                strokeWidth="8"
                                fill="transparent"
                                strokeDasharray={`${2 * Math.PI * 90}`}
                                strokeDashoffset={2 * Math.PI * 90 * (1 - progress)}
                                strokeLinecap="round"
                                transform="rotate(-90 100 100)"
                            />
                        </Svg>

                        <View style={styles.timerContent}>
                            <Text style={styles.timerText}>{formatTime(timerState.seconds)}</Text>
                            <Text style={styles.phaseText}>{phaseInfo?.name ?? ''}</Text>
                            {currentDescription && (
                                <Text style={styles.timerDescription}>{currentDescription}</Text>
                            )}
                            <Text style={styles.progressText}>
                                –ò–Ω—Ç–µ—Ä–≤–∞–ª {timerState.currentCycle} / –°–µ—Ç {timerState.currentSet}
                            </Text>
                        </View>
                    </View>
                </View>
            )}

            {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
            <View style={styles.controlsContainer}>
                <View style={styles.allControls}>
                    {/* –ö–Ω–æ–ø–∫–∞ –°–¢–ê–†–¢/–°–¢–û–ü */}
                    <TouchableOpacity
                        style={[styles.controlButton, isRecording ? styles.stopButton : styles.startButton]}
                        onPress={handleStartStop}
                        disabled={isPendingStart || isPendingStop}
                    >
                        <Text style={styles.controlButtonText}>
                            {isRecording ? '‚èπÔ∏è –°–¢–û–ü' : 'üé¨ –°–¢–ê–†–¢'}
                        </Text>
                    </TouchableOpacity>

                    {/* –ö–Ω–æ–ø–∫–∞ –ü–ê–£–ó–ê/–î–ê–õ–ï–ï */}
                    <TouchableOpacity
                        style={[styles.controlButton, isPaused ? styles.resumeButton : styles.pauseButton]}
                        onPress={handlePauseResume}
                    >
                        <Text style={styles.controlButtonText}>
                            {isPaused ? '‚ñ∂Ô∏è –î–ê–õ–ï–ï' : '‚è∏Ô∏è –ü–ê–£–ó–ê'}
                        </Text>
                    </TouchableOpacity>

                    {/* –ö–Ω–æ–ø–∫–∞ –°–ë–†–û–° */}
                    <TouchableOpacity style={[styles.controlButton, styles.resetButton]} onPress={handleReset}>
                        <Text style={styles.controlButtonText}>üîÑ –°–ë–†–û–°</Text>
                    </TouchableOpacity>
                </View>
            </View>

            {/* –ù–µ–≤–∏–¥–∏–º–∞—è –∑–æ–Ω–∞ –¥–ª—è —Å—Ç–æ–ø–∞ ‚Äî –æ—Ç–∫–ª—é—á–µ–Ω–∞, —Ç.–∫. UI —Å–Ω–æ–≤–∞ –≤–∏–¥–∏–º */}

            {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ */}
            {isTimerFinished && (
                <View style={styles.finishedOverlay}>
                    <Text style={styles.finishedText}>–¢–†–ï–ù–ò–†–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</Text>
                </View>
            )}
        </View>
    )
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#000',
    },
    overlay: {
        flex: 1,
        backgroundColor: 'transparent',
    },
    permissionContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#000',
        padding: 20,
    },
    permissionText: {
        color: '#fff',
        fontSize: 18,
        textAlign: 'center',
        marginBottom: 20,
    },
    permissionButton: {
        backgroundColor: '#007AFF',
        paddingHorizontal: 30,
        paddingVertical: 15,
        borderRadius: 25,
    },
    permissionButtonText: {
        color: '#fff',
        fontSize: 16,
        fontWeight: '600',
    },
    topControls: {
        position: 'absolute',
        top: 50,
        right: 20,
        flexDirection: 'row',
        justifyContent: 'flex-end',
        alignItems: 'center',
        gap: 10,
        zIndex: 10,
    },
    topButton: {
        width: 50,
        height: 50,
        justifyContent: 'center',
        alignItems: 'center',
    },
    topButtonText: {
        fontSize: 24,
        textShadowColor: 'rgba(0, 0, 0, 0.8)',
        textShadowOffset: { width: 1, height: 1 },
        textShadowRadius: 3,
    },
    recordingIndicator: {
        position: 'absolute',
        top: 50,
        left: 20,
        flexDirection: 'row',
        alignItems: 'center',
        backgroundColor: 'rgba(255, 0, 0, 0.9)',
        paddingHorizontal: 12,
        paddingVertical: 8,
        borderRadius: 20,
        zIndex: 10,
    },
    recordingText: {
        color: '#fff',
        fontWeight: 'bold',
        fontSize: 14,
    },
    pauseIndicator: {
        position: 'absolute',
        top: 50,
        left: 20,
        backgroundColor: 'rgba(255, 193, 7, 0.9)',
        paddingHorizontal: 12,
        paddingVertical: 8,
        borderRadius: 20,
        zIndex: 10,
    },
    pauseText: {
        color: '#000',
        fontWeight: 'bold',
        fontSize: 14,
    },
    timerContainer: {
        flex: 1,
        justifyContent: 'center',
        alignItems: 'center',
    },
    timerCircle: {
        position: 'relative',
        justifyContent: 'center',
        alignItems: 'center',
    },
    progressSvg: {
        transform: [{ rotate: '-90deg' }],
    },
    timerContent: {
        position: 'absolute',
        justifyContent: 'center',
        alignItems: 'center',
    },
    timerText: {
        fontSize: 48,
        fontWeight: 'bold',
        color: '#fff',
        textShadowColor: 'rgba(0, 0, 0, 0.8)',
        textShadowOffset: { width: 2, height: 2 },
        textShadowRadius: 4,
    },
    phaseText: {
        fontSize: 18,
        fontWeight: '600',
        color: '#fff',
        marginTop: 5,
        textShadowColor: 'rgba(0, 0, 0, 0.8)',
        textShadowOffset: { width: 1, height: 1 },
        textShadowRadius: 3,
    },
    timerDescription: {
        fontSize: 14,
        color: 'rgba(255, 255, 255, 0.9)',
        textAlign: 'center',
        marginTop: 4,
        textShadowColor: 'rgba(0, 0, 0, 0.8)',
        textShadowOffset: { width: 1, height: 1 },
        textShadowRadius: 3,
    },
    progressText: {
        fontSize: 12,
        color: 'rgba(255, 255, 255, 0.8)',
        textAlign: 'center',
        marginTop: 8,
        textShadowColor: 'rgba(0, 0, 0, 0.8)',
        textShadowOffset: { width: 1, height: 1 },
        textShadowRadius: 3,
    },
    controlsContainer: {
        position: 'absolute',
        bottom: 50,
        left: 20,
        right: 20,
        alignItems: 'center',
    },
    hiddenWhileRecording: {
        opacity: 0,
        pointerEvents: 'none',
    },
    invisibleStopOverlay: {
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        // –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π, –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–∞–ø–∞
        backgroundColor: 'transparent',
        zIndex: 1,
    },
    controlButton: {
        flex: 1,
        paddingVertical: 15,
        borderRadius: 25,
        alignItems: 'center',
        justifyContent: 'center',
    },
    controlButtonText: {
        fontSize: 14,
        fontWeight: '600',
        color: '#fff',
    },
    startButton: {
        backgroundColor: 'rgba(40, 167, 69, 0.9)',
    },
    stopButton: {
        backgroundColor: 'rgba(220, 53, 69, 0.9)',
    },
    pauseButton: {
        backgroundColor: 'rgba(255, 193, 7, 0.9)',
    },
    resumeButton: {
        backgroundColor: 'rgba(40, 167, 69, 0.9)',
    },
    resetButton: {
        backgroundColor: 'rgba(108, 117, 125, 0.9)',
    },
    finishedOverlay: {
        position: 'absolute',
        top: '40%',
        left: 20,
        right: 20,
        backgroundColor: 'rgba(40, 167, 69, 0.95)',
        padding: 20,
        borderRadius: 15,
        alignItems: 'center',
    },
    finishedText: {
        fontSize: 24,
        fontWeight: 'bold',
        color: '#fff',
        textAlign: 'center',
    },
    allControls: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        width: '100%',
        gap: 10,
    },
    cameraOverlay: {
        position: 'absolute',
        bottom: 120,
        left: 20,
        right: 20,
        backgroundColor: 'rgba(0, 0, 0, 0.9)',
        padding: 15,
        borderRadius: 10,
        alignItems: 'center',
        zIndex: 1000,
    },
    recordingTimerWrapper: {
        position: 'absolute',
        top: '30%',
        left: 0,
        right: 0,
        alignItems: 'center',
        justifyContent: 'center',
        zIndex: 1000,
    },
    cameraTimerText: {
        fontSize: 48,
        fontWeight: 'bold',
        color: '#fff',
        textAlign: 'center',
        textShadowColor: 'rgba(0, 0, 0, 1)',
        textShadowOffset: { width: 2, height: 2 },
        textShadowRadius: 4,
    },
    cameraPhaseText: {
        fontSize: 18,
        fontWeight: '600',
        color: '#fff',
        marginTop: 5,
        textAlign: 'center',
        textShadowColor: 'rgba(0, 0, 0, 1)',
        textShadowOffset: { width: 1, height: 1 },
        textShadowRadius: 3,
    },
    cameraProgressText: {
        fontSize: 14,
        fontWeight: '600',
        color: '#fff',
        marginTop: 3,
        textAlign: 'center',
        textShadowColor: 'rgba(0, 0, 0, 1)',
        textShadowOffset: { width: 1, height: 1 },
        textShadowRadius: 3,
    },
}) 