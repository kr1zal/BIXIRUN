import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define a type for the slice state
export interface TimerState {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–µ—Ä–∞
    prep: number;
    work: number;
    rest: number;
    cycles: number;
    sets: number;
    restBetweenSets: number;
    descWork: string;
    descRest: string;
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    phase: 'prep' | 'work' | 'rest' | 'restSet' | 'done';
    currentCycle: number;  // –¢–µ–∫—É—â–∏–π —Ü–∏–∫–ª (1-based)
    currentSet: number;    // –¢–µ–∫—É—â–∏–π —Å–µ—Ç (1-based)
    seconds: number;       // –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã –≤ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ
    running: boolean;
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    totalCycles: number;
    totalSets: number;
    isFinished: boolean;
}

// Create the initial state
const initialState: TimerState = {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    prep: 5,
    work: 60,
    rest: 20,
    cycles: 10,
    sets: 1,
    restBetweenSets: 120,
    descWork: '',
    descRest: '',
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    phase: 'prep',
    currentCycle: 0,
    currentSet: 1,
    seconds: 5, // –ù–∞—á–∏–Ω–∞–µ–º —Å prep –≤—Ä–µ–º–µ–Ω–∏
    running: false,
    
    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
    totalCycles: 10,
    totalSets: 1,
    isFinished: false
};

export const timerSlice = createSlice({
    name: 'timer',
    initialState,
    reducers: {
        setPrep: (state, action: PayloadAction<number>) => {
            state.prep = action.payload;
            if (state.phase === 'prep') {
                state.seconds = action.payload;
            }
        },
        setWork: (state, action: PayloadAction<number>) => {
            state.work = action.payload;
            if (state.phase === 'work') {
                state.seconds = action.payload;
            }
        },
        setRest: (state, action: PayloadAction<number>) => {
            state.rest = action.payload;
            if (state.phase === 'rest') {
                state.seconds = action.payload;
            }
        },
        setCycles: (state, action: PayloadAction<number>) => {
            state.cycles = action.payload;
            state.totalCycles = action.payload;
        },
        setSets: (state, action: PayloadAction<number>) => {
            state.sets = action.payload;
            state.totalSets = action.payload;
        },
        setRestBetweenSets: (state, action: PayloadAction<number>) => {
            state.restBetweenSets = action.payload;
            if (state.phase === 'restSet') {
                state.seconds = action.payload;
            }
        },
        setDescWork: (state, action: PayloadAction<string>) => {
            state.descWork = action.payload;
        },
        setDescRest: (state, action: PayloadAction<string>) => {
            state.descRest = action.payload;
        },
        startTimer: (state) => {
            state.running = true;
        },
        pauseTimer: (state) => {
            state.running = false;
        },
        resetTimer: (state) => {
            state.phase = 'prep';
            state.currentCycle = 0;
            state.currentSet = 1;
            state.seconds = state.prep;
            state.running = false;
            state.isFinished = false;
        },
        decrementSeconds: (state) => {
            if (state.seconds > 0) {
                state.seconds = state.seconds - 1;
            }
        },
        nextPhase: (state) => {
            console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —Ñ–∞–∑—ã ${state.phase}, —Ü–∏–∫–ª ${state.currentCycle}/${state.cycles}, —Å–µ—Ç ${state.currentSet}/${state.sets}`);
            
            if (state.phase === 'prep') {
                // –ò–∑ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–±–æ—Ç–µ
                state.phase = 'work';
                state.seconds = state.work;
                state.currentCycle = 1;
                console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥: prep ‚Üí work');
                
            } else if (state.phase === 'work') {
                // –ò–∑ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–¥—ã—Ö—É –∏–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ—Ç—É/–∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
                if (state.currentCycle < state.cycles) {
                    // –ï—â–µ –µ—Å—Ç—å —Ü–∏–∫–ª—ã –≤ —Ç–µ–∫—É—â–µ–º —Å–µ—Ç–µ
                    state.phase = 'rest';
                    state.seconds = state.rest;
                    console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥: work ‚Üí rest');
                } else {
                    // –ó–∞–∫–æ–Ω—á–∏–ª–∏ –≤—Å–µ —Ü–∏–∫–ª—ã –≤ —Å–µ—Ç–µ
                    if (state.currentSet < state.sets) {
                        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ç–¥—ã—Ö—É –º–µ–∂–¥—É —Å–µ—Ç–∞–º–∏
                        state.phase = 'restSet';
                        state.seconds = state.restBetweenSets;
                        console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥: work ‚Üí restSet');
                    } else {
                        // –í—Å–µ —Å–µ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                        state.phase = 'done';
                        state.running = false;
                        state.isFinished = true;
                        console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥: work ‚Üí done (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞)');
                    }
                }
                
            } else if (state.phase === 'rest') {
                // –ò–∑ –æ—Ç–¥—ã—Ö–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ü–∏–∫–ª—É —Ä–∞–±–æ—Ç—ã
                state.phase = 'work';
                state.seconds = state.work;
                state.currentCycle = state.currentCycle + 1;
                console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥: rest ‚Üí work');
                
            } else if (state.phase === 'restSet') {
                // –ò–∑ –æ—Ç–¥—ã—Ö–∞ –º–µ–∂–¥—É —Å–µ—Ç–∞–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É —Å–µ—Ç—É
                state.currentSet = state.currentSet + 1;
                state.currentCycle = 1;
                state.phase = 'work';
                state.seconds = state.work;
                console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥: restSet ‚Üí work (–Ω–æ–≤—ã–π —Å–µ—Ç)');
            }
            
            console.log(`üìä –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ñ–∞–∑–∞=${state.phase}, —Ü–∏–∫–ª=${state.currentCycle}/${state.cycles}, —Å–µ—Ç=${state.currentSet}/${state.sets}, —Å–µ–∫—É–Ω–¥—ã=${state.seconds}`);
        },
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ URL params)
        setTimerConfig: (state, action: PayloadAction<{
            prep?: number;
            work?: number;
            rest?: number;
            cycles?: number;
            sets?: number;
            restBetweenSets?: number;
            descWork?: string;
            descRest?: string;
        }>) => {
            const config = action.payload;
            
            if (config.prep !== undefined) state.prep = config.prep;
            if (config.work !== undefined) state.work = config.work;
            if (config.rest !== undefined) state.rest = config.rest;
            if (config.cycles !== undefined) {
                state.cycles = config.cycles;
                state.totalCycles = config.cycles;
            }
            if (config.sets !== undefined) {
                state.sets = config.sets;
                state.totalSets = config.sets;
            }
            if (config.restBetweenSets !== undefined) state.restBetweenSets = config.restBetweenSets;
            if (config.descWork !== undefined) state.descWork = config.descWork;
            if (config.descRest !== undefined) state.descRest = config.descRest;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            state.phase = 'prep';
            state.currentCycle = 0;
            state.currentSet = 1;
            state.seconds = state.prep;
            state.running = false;
            state.isFinished = false;
            
            console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', config);
        }
    }
});

export const {
    setPrep,
    setWork,
    setRest,
    setCycles,
    setSets,
    setRestBetweenSets,
    setDescWork,
    setDescRest,
    startTimer,
    pauseTimer,
    resetTimer,
    decrementSeconds,
    nextPhase,
    setTimerConfig
} = timerSlice.actions;

export default timerSlice.reducer; 